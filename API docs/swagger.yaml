swagger: '2.0'
info:
  version: '1.0.0'
  title: Swagger Petstore (Simple)
  description: A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification
  termsOfService: http://helloreverb.com/terms/
  contact:
    name: Swagger API team
    email: foo@example.com
    url: http://swagger.io
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
host: localhost:8080
basePath: /RestEasy-Spring-Hibernate/resteasy/bookservice
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /allbooks:
    get:
      description: Returns all books
      operationId: findBooks
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: pet response
          schema:
            type: array
            items:
              $ref: '#/definitions/book'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    
  /book/{id}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: findPetById
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: book response
          schema:
            $ref: '#/definitions/book'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      description: deletes a single book
      operationId: deleteBook
      produces:
        - application/x-www-form-urlencoded
      parameters:
        - name: id
          in: path
          description: ID of book to delete
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: book deleted
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
  /book:
    post:
      description: deletes a single book
      operationId: addBook
      produces:
        - application/x-www-form-urlencoded
      parameters:
        - in: body
          name: body
          description: Pet object that needs to be added to the store
          required: true
          schema:
            $ref: "#/definitions/book"
      responses:
        '204':
          description: book updated
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    put:
      description: Update existing book in catalog
      operationId: updateBookByObject
      produces:
        - application/x-www-form-urlencoded
      parameters:
        - in: body
          name: body
          description: Pet object that needs to be added to the store
          required: true
          schema:
            $ref: "#/definitions/book"
      responses:
        '204':
          description: book updated
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

definitions:
  book:
    type: object
    required:
      - bookId
      - author
      - title
    properties:
      bookId:
        type: integer
        format: int64
      author:
        type: string
      title:
        type: string

  errorModel:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
